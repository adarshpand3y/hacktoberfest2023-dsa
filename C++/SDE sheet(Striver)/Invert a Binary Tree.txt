//Inorder traversal - codestudio
#include<bits/stdc++.h>
bool help(TreeNode<int>*root,stack<TreeNode<int>*>&st,TreeNode<int>*leaf){
	st.push(root);
	if(root->left==NULL && root->right==NULL){
		if(root->data==leaf->data){
			return true;
		}
		else{
			st.pop();
			return false;
		}
	}
	bool left = false;
	bool right = false;
	
	if(root->left!=NULL){
		left = help(root->leaf,st,leaf);
	}
	if(left){
		return true;
	}
	if(root->right!=NULL){
		right = help(root->right,st,leaf);
	}
	if(right){
		return true;
	}
	st.pop();
	return false;
}
TreeNode<int>*invertBinaryTree(TreeNode<int>*root,TreeNode<int>*leaf){
	if(root==NULL){
		return root;
	}
	stack<TreeNode<int>*>st;
	
	help(root,st,leaf);
	
	TreeNode<int>*newRoot = st.top();
	st.pop();
	TreeNode<int>*parent = newRoot;
	
	while(!st.empty()){
		TreeNode<int>*currNode = st.top();
		st.pop();
		
		if(currNode->left==parent){
			currNode->left = NULL;
			parent->left = currNode;
		}
		else{
			currNode->right = currNode->left;
			currNode->left = NULL;
			parent->left = currNode;
		}
		parent = parent->left;
	}
		return newRoot;
}
	
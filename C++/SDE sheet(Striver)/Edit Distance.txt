//using recursion
#include<bits/stdc++.h>
using namespace std;

int help(int i,int j,string&s1,string&s2){
	if(i==0)
	return j;
	if(j==0)
	return i;
	
	int ans = 1+min({
		editDistance(i,j-1,s1,s2);
		editDistance(i-1,j,s1,s2);
		editDistance(i+1,j+1,s1,s2);
	});
	
	if(s1[i-1]==s2[j-1]){
		ans = min(ans,help(i-1,j-1,s1.s2));
	}
	return ans;
}

int editDistance(string s1,string s2){
	int n = s1.size()+1;
	int m = s2.size()+1;
	int ans = help(n,m,s1,s2);
	return ans;
}
//using DP(iterative)
int editDistance(string s1,string s2){
	int n = s1.size();
	int m = s2.size();
	int **dp = new int*[n+1];
	
	for(int i=0;i<=n;i++){
		dp[i] = new int[m+1];
	}
	for(int i=0;i<=n;i++){
		for(int j=0;j<=m;j++){
			if(i==0){
				dp[i][j] =j;
			}
			else if(j==0){
				dp[i][j] = i;
			}
			else if(s1[i-1]==s2[j-1]){
				dp[i][j] = dp[i-1][j-1];
			}
			else{
				dp[i][j] = 1+min(min(dp[i][j-1],dp[i-1][j]),dp[i-1][j-1]);
			}
		}	
	}
	int ans = dp[n][m];
	
	for(int i=0;i<=n;i++){
		delete[]dp[i];
	}
	delete[]dp;
	return ans;
}
//brute approach
#include<bits/stdc++.h>
vector<int>findMedian(vector<int>&arr,int n){
	vector<int>store;
	vector<int>medians;
	
	for(int i=0;i<n;i++){
		store.push_back(arr[i]);
	sort(store.begin().store.end());
	int median;
	
	if((i+1)%2==0){
		median = (store[i/2]+store[(i+1)/2])/2;
	}
	else{
		median = store[i/2];
	}
	medians.push_back(median);
	}
	return medians;
}
//heap
vector<int>findMedian(vector<int>&arr,int n){
	vector<int>medians;
	priority_queue<int>lo;//max heap
	priority_queue<int,vector<int>,greater<int>>hi;//min heap
	
	for(int i=0;i<n;i++){
		int num  = arr[i];
		lo.push(num);
		
		hi.push(lo.top());
		lo.pop();
		
		if(lo.size()<hi.size()){
			lo.push(hi.top());
			hi.pop();
		}
		int median;
		if(lo.size()>hi.size()){
			median = lo.top();
		}
	 else{
	 	median = (lo.top()+hi.top())/2;
	 }
	 medians.push_back(median);
	}
	return medians;
}
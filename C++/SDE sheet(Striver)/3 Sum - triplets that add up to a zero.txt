//brute force
vector<vector<int>>threeSum(vector<int>&nums){
	vector<vector<int>>ans;
	vector<int>temp;
	int i,j,k;
	for(int i=0;i<nums.size()-2;i++){
		for(int j=i+1;j<nums.size()-1;j++){
			for(int k=j+1;k<nums.size();k++){
				temp.clear();
			if(nums[i]+nums[j]+nums[k]==0){
				temp.push_back(nums[i]);
				temp.push_back(nums[j]);
				temp.push_back(nums[k]);
			}
			if(temp.size()!=0)
			ans.push_back(temp);
			}
		}
	}
	return ans;
}
//Optimised solution - two pointer appraoch + binary search
vector<vector<int>>threeSum(vector<int>&nums){
	vector<vector<int>>ans;
	sort(nums.begin(),nums.end());
	
	for(int i=0;i<(int)(nums.size())-2;i++){
		if(i==0 || (i>0 && nums[i]!=nums[i-1])){
			int low = i+1;
			int high = (int)(nums.size())-1;
			int sum  = 0-nums[i];
			
	while(low<high){
		if(nums[low]+nums[high]==sum){
			vector<int>temp;
			temp.push_back(nums[i]);
			temp.push_back(nums[j]);
			temp.push_back(nums[k]);
			ans.push_back(temp);
			
	while(low<high && nums[low]==nums[low+1])
		low++;
	while(low<high && nums[high]==nums[high-1])
		high--;
	low++,high--;
		}
	else if(nums[low]+nums[high]<sum)
		low++;
	else
		high--;
		}
	  }	
	}
    return ans;
}
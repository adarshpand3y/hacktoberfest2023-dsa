//brute approach 
#include<bits/stdc++.h>
using namespace std;
int solve(vector<int>&arr){
	int maxLen =0;
	unordered_map<int,int>mp;
	int sum =0;
	
	for(int i=0;i<arr.size();i++){
		sum +=arr[i];
		
		if(sum==0){
			maxLen = i+1;
		}
		else if(mp.find(sum)!=mp.end()){
			maxLen = max(maxLen,i-mp[sum]);
		}
		else{
			mp[sum] =i;
		}
	}
	return maxLen;
}
//Optimal solution - prefix sum
int maxLen(int arr[],int n){
	unordered_map<int,int>mp;
	int maxi = 0;
	int sum =0;
	for(int i=0;i<n;i++){
		sum +=arr[i];
		if(sum ==0){
			maxi = i+1;
		}
		else{
			if(mp.find(sum)!=mp.end()){
				maxi = max(maxi,i-mp[sum]);
			}
			else{
				mp[sum] =i;
			}
		}
	}
	return maxi;
}
//Another solution - prefix sum
#include <bits/stdc++.h>
int LongestSubsetWithZeroSum(vector < int > arr) {
  // Write your code 
  int maxi=0;
  int sum =0;
  unordered_map<int,int>mp;
  for(int i=0;i<arr.size();i++){
    sum +=arr[i];
    if(sum ==0)
    maxi=i+1;

    else if(mp.find(sum)!=mp.end())
    maxi = max(maxi,i-mp[sum]);
    else
    mp[sum] =i;
  }
  return maxi;

}

//using extra data structure
#include<bits/stdc++.h>
using namespace std;

class Node{
	public:
		int num;
		node*next;
		node(int val){
			num = val;
			next = NULL;
	}
};
bool isPalindrome(node*head){
	vector<int>arr;
	while(head!=NULL){
		arr.push_back(head->num);
		head = head->next;
	}
	for(int i=0;i<arr.size()/2;i++)
	if(arr[i]!=arr[arr.size()-i-1])
		return false;
	return true;
}
//optimised solution
node*reverse(node*ptr){
	node*prev = NULL;
	node*nex = NULL;
	while(ptr!=NULL){
		nex = ptr->next;
		ptr->next = prev;
		prev = ptr;
		ptr = nex;
	}
	return prev;
}
bool isPalindrome(node*head){
	if(head==NULL ||head->next==NULL)
	return true;
	
	node*slow = head;
	node*fast = head;
	
	while(fast->next!=NULL && fast->next->next!=NULL){
		slow = slow->next;
		fast = fast->next;
	}
	
	slow->next = reverse(slow->next);
	slow = slow->next;
	node*dummy = head;
	
	while(slow!=NULL){
		if(dummy->num!= slow->num)
		return false;
		dummy = dummy->next;
		slow = slow->next;
	}
	return true;
}
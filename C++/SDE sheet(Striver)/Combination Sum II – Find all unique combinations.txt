//using extra space & time complexity
void findCombinations(int ind,int target,vector<int>&candidates,vector<int>&ds,vector<vector<int>>&ans){
	if(target==0){
		ans.push_back(ds);
	return;
}
for(int i=ind;i<candidates.size();i++){
	if(i>ind && candidates[i] = candidates[i-1])
		continue;
	if(candidates[i]>target)
		break;
	ds.push_back(candidates[i]);
	findCombinations(i+1,target-candidates[i],candidates,ans,ds);
	ds.pop_back();
	}
}
vector<vector<int>>&combinations(vector<int>&candidates,int target){
	sort(candidates.begin(),candidates.end());
	vector<vector<int>>ans;
	vector<int>ds;
	findCombinations(0,target,candidates,ans,ds);
	return ans;
}
//brute approach
vector<int>getSecondOrderElements(vector<int>arr,int n){
	vector<int>ans;
	sort(arr.begin(),arr.end());
	int largest = arr[arr.size()-1];
	int secLargest = 0;
	for(int i=n-2;i>=0;i--){
		if(arr[i]!=largest){
			secLargest = arr[i];
			break;
		}
	}
	ans.push_back(secLargest);
	ans.push_back(arr[1]);
	return ans;
}
//better approach
vector<int>getSecondOrderElements(vector<int>arr,int n){
	vector<int>ans;
	int largest = arr[0];
	for(int i=1;i<n;i++){
		if(arr[i]>largest){
			largest = arr[i];
		}
	}
	int secLargest = INT_MIN;
	for(int i=0;i<n;i++){
		if(arr[i]>secLargest && arr[i]!=largest){
			secLargest = arr[i];
		}
	}
	int smallest = arr[0];
	for(int i=1;i<n;i++){
		if(arr[i]<smallest){
			smallest = arr[i];
		}
	}
	int secSmallest = INT_MAX;
	for(int i=0;i<n;i++){
		if(arr[i]<secSmallest && arr[i]!=smallest){
			secSmallest = arr[i];
		}
	}
	ans.push_back(secLargest);
	ans.push_back(secSmallest);
	return ans;
}
//Optimal solution
vector<int>getSecondOrderElements(vector<int>arr,int n){
	int largest = arr[0];
	int secLargest = -1;
	for(int i=1;i<n;i++){
		if(arr[i]>largest){
			secLargest = largest;
			largest = arr[i];
		}
		else if(arr[i]<largest && arr[i]>secLargest){
			secLargest = arr[i];
		}
	}
	int smallest = arr[0];
	int secSmallest  = INT_MAX;
	for(int i=1;i<n;i++){
		if(arr[i]<smallest){
			secSmallest  = smallest;
			smallest = arr[i];
		}
		if(arr[i]>smallest && arr[i]<secSmallest){
			secSmallest = arr[i];
		}
	}
	return {secLargest,secSmallest};
}
//recursive
#include<bits/stdc++.h>
using namespace std;
int f(vector<int>&arr,int i,int j){
	if(i==j)
	return 0;
	int mini = INT_MAX;
	for(int k=i;k<=j-1;k++){
		int ans = f(arr,i,k) + f(arr,k+1,j)+arr[i-1]&arr[k]*arr[j];
		mini = min(ans,mini);
}
return mini;
}
int matrixMultiplication(vector<int>&arr,int n){
	int i=1,j=n-1;
	return f(arr,i,j);
}
//memoization
int f(vector<int>&arr,int i,int j){
	if(i==j)
		return 0;
	
	//already completed
	if(dp[i][j]!=-1)
		return dp[i][j];
	
	int mini = INT_MAX;
	
	for(int k=i;k<=j;k++){
		int ans = f(arr,i,k,dp)+f(arr,k+1,j,dp)+arr[i-1]*arr[j]*arr[k];
		mini = min(mini,ans);
	}
	return mini;
}
int matrixMultiplication(vector<int>&arr,int n){
	vector<vector<int>>dp(n,vector<int>(n,-1));
	int i=1,j=n-1;
	
	return f(arr,i,j);
}
//Another sol - codestudio
#include <bits/stdc++.h> 
int matrixMultiplication(vector<int>&arr, int n)
{
    // Write your code here.
    vector<vector<int>>dp(n,vector<int>(n+1,INT_MAX));
    for(int i=0;i<n-1;i++)
        dp[i][i+1] = 0;
        for(int gap =2;gap<n;gap++){
            for(int i=0;i+gap<n;i++){
                int j = i+gap;
            for(int k =i+1;k<j;k++){
                dp[i][j] = min(dp[i][j],dp[i][k]+dp[k][j]+arr[i]*arr[k]*arr[j]);
            }
        }
    }
    return dp[0][n-1];
}
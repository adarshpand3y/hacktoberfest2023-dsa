//using bellman ford algorithm
#include<bits/stdc++.h>
int bellmanFord(int n,int m,int src,int dest,vector<vector<int>>&edges){
	vector<int>dist(n+1,1e9);
	dist[src] =0;
	
	for(int i=1;i<n;i++){
		for(int j=0;j<m;j++){
			int u = edges[j][0];
			int v = edges[j][1];
			int w = edges[j][2];
		
		if(dist[u]!=1e9 && dist[v]>(dist[u]+w)){
			dist[v] = dist[u]+w;
		}
	}
}
`	return dist[dest];
}
//Another sol
int bellmonFord(int n, int m, int src, int dest, vector<vector<int>>&edges) {
    vector<int>dist(n+1,1e9);

    dist[src] = 0;
    for(int i = 1; i<n; i++)
    {
        //traverse on edge list
        for(int j = 0; j<m;j++)
        {
            int u = edges[j][0];
            int v = edges[j][1];
            int w = edges[j][2];

            if (dist[u] != 1e9 && dist[u] + w < dist[v]) {
              dist[v] = dist[u] + w;
            }
        }
    }

        //check negative cycle
        bool flag = 0;
        for(int j = 0; j<m;j++)
        {
            int u = edges[j][0];
            int v = edges[j][1];
            int w = edges[j][2];

            if(dist[u]!=1e9 && dist[u] + w <dist[v]){
                flag = 1;
            }
    }

    if(flag == 0)
    {
        return dist[dest];
    }
}
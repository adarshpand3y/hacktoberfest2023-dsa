//using DFS - codestudio
#include<bits/stdc++.h>
bool isCycle(int V,vector<vector<int>&graph,vector<bool>&visited,vector<int>&parent){
	visited[V] = true;
	
	for(int adjV:graph[V]){
		if(visited[adjV]==false){
			if(isCycle(adjV,graph,visited,V)==true){
				return true;
			}
		}
		else if(adjV!=parent){
			return true;
		}
	}
	return false;
}
string CycleDetection(vector<vector<int>>&edges,int n,int m){
	vector<vector<int>>graph(n+1,vector<int>());
	for(int i=0;i<m;i++){
		graph[edges[i][1]].push_back(edges[i][0]);
		graph[edges[i][0]].push_back(edges[i][1]);
	}
	vector<bool>visited(n+1,false);
	
	for(int i=1;i<=n;i++){
		if(visited[i]==false){
			if(isCycle(i,graph,visited,-1)==true)
			{
				return "Yes";
			}
		}
	}
	return "No";
}
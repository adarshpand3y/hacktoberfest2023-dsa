//naive solution
int kThElement(int arr1[],int arr2[],int m,int n,int k){
	int p1 =0,p2 =0;
	int count =0;
	int ans =0;
	
	while(p1<m && p2<n){
		if(count==k)
		break;
		else if(arr1[p1]<arr2[p2]){
			ans =arr1[p1];
			++p1;
		}
		else{
			ans = arr2[p2];
			++p2;
		}
		++count;
	}
	
	if(count!=k){
		if(p1!=m-1)
		ans = arr1[k-count];
		else
		ans = arr2[k-count];
	}
	return ans;
}
//Optimal solution
int kThElement(int arr1[],int arr2[],int m,int n,int k){
	if(m>n){
		return kThElement(arr2,arr1,n,m,k);
	}
	int low = max(0,k-m);
	int high = min(k,n);
	
	while(low<=high){
		int cut1 = (low+high)>>1;
		int cut2 = k-cut1;
		int l1 = cut1==0?INT_MIN:arr1[cut1-1];
		int l2 = cut2==0?INT_MIN:arr2[cut2-1];
		int r1 = cut1==n?INT_MAX:arr1[cut1];
		int r2 = cut2==m?INT_MAX:arr2[cut2];
		
		if(l1<=r2 && l2<=r1){
			return max(l1,l2);
		}
		else if(l1>r2){
			high = cut1-1;
		}
		else{
			low = cut1+1;
		}
	}
	return 1;
}
//another solution
int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {
    // Write your code here.
    vector<int>v;
    for(int i=0;i<row1.size();i++){
        v.push_back(row1[i]);
    }
    for(int i=0;i<row2.size();i++){
        v.push_back(row2[i]);
    }
    sort(v.begin(),v.end());
    return v[k-1];
}
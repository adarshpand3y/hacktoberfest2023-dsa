#include<bits/stdc++.h>
//DFS For Each Connected Component - codestudio
void dfs(int i,vector<int>&vis,vector<int>adj[],vector<int>&temp){
	vis[i] =1;
	temp.push_back(1);
	for(auto node:adj[i]){
		if(!vis[node]){
			dfs(node,vis,adj,temp);
		}
	}
}
vector<vector<int>>DepthFirstSearch(int V,int E,vector<vector<int>>&edges){
	vector<vector<int>>ans;
	vector<int>adj[V];
	for(auto it:edges){
		adj[it[0]].push_back(it[1]);
		adj[it[1]].push_back(it[0]);
	}
	vector<int>vis(V,0);
	for(int i=0;i<V;i++){
		if(!vis[i]){
			vector<int>temp;
			dfs(i,vis,adj,temp);
			ans.push_back(temp);
		}
	}
	return ans;
}
//Another sol - GFG
void dfs(int node,vector<int>&ans,vector<int>&visited,vector<int>adj[]){
        ans.push_back(node);
        visited[node] = 1;
        for(auto it:adj[node]){
            if(visited[it]==0)
            dfs(it,ans,visited,adj);
        }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int>visited(V,0);
        vector<int>ans;
        
        dfs(0,ans,visited,adj);
        return ans;
}
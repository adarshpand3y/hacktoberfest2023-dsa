//using tabulation + DP(codestudio)
#include<bits/stdc++.h>
using namespace std;

int lcs(string s, string t)
{
	int m = s.size();
	int n = t.size();

	vector<vector<int>>dp(m+1,vector<int>(n+1,0));
	for(int i =1; i<=m;i++){
		for(int j =1; j<=n;j++){
			if(s[i-1]==t[j-1]){
				dp[i][j] =1+dp[i-1][j-1];
			}

			else{
				dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
			}
		}
	}
	return dp[m][n];
}
//Another sol - DP + space-optimisation(codestudio)
int lcs(string s1,string s2){
	int n = s1.size();
	int m = s2.size();
	
	vector<int>prev(m+1,0);
	vector<int>cur(m+1,0);
	
	for(int ind1=1;ind1<=n;ind1++){
		for(int ind2=1;ind2<=m;ind2++){
			if(s1[ind1-1]==s2[ind2-1])
			cur[ind2] = 1+prev[ind2-1];
			else
			cur[ind2] = 0+max(prev(ind2),cur[ind2-1]);
		}
		prev = cur;
	}
	return prev[m];
}
//brute approach
#include<bits/stdc++.h>
int maximumXor(vector<int>&arr){
	int ans =0;
	int n = arr.size();
	
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			ans = max(ans,arr[i]^arr[j]);
		}
	}
	return ans;
}
//using bit-masking
int maximumXor(vector<int>&arr){
	int n = arr.size();
	int ans =0;
	int mask =0;
	unordered_set<int>st;
	
	for(int i=30;i>=0;i--){
		mask = mask|(1<<i);
		for(int j=0;j<n;j++){
			st.insert(arr[j]&mask)
		}
		int temp = ans;
		temp=temp|(1<<i);
		for(auto i:st){
			if(st.count(it^temp)){
				ans = temp;
				break;
			}
		}
		st.clear();
	}
	return ans;
}
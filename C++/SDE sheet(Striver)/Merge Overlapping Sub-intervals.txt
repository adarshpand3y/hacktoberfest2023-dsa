//brute approach
#include<bits/stdc++.h>
using namespace std;
vector<vector<int>mergeOverlappingIntervals(vector<vector<int>>&arr){
	int n = arr.size();
	sort(arr.begin(),arr.end());
	
	vector<vector<int>>ans;
	
	for(int i=0;i<n;i++){ //select an interval
		int start = arr[i][0];
		int end = arr[i][1];
		
//skip all the merged intervals
	if(!ans.empty() && end<=ans.back()[1]){
		continue;
	}
//check the rest of the intervals
     for(int j=i+1;j<n;j++){
     	if(arr[j][0]<=end){
     		end = max(end,arr[j][1]);
		 }
		 else{
		 	break;
		 }
	 }
	 ans.push_back({start,end});
}
	return ans;
}
//Optimal solution
vector<vector<int>>mergeOverlappingIntervals(vector<vector<int>&arr){
	int n = arr.size();
	
	sort(arr.begin(),arr.end());
	
	vector<vector<int>>ans;
	
	for(int i=0;i<n;i++){
// if the current interval does not
// lie in the last interval:		
		if(ans.empty()||arr[i][0]>ans.back()[1]){
			ans.push_abck(arr[i]);
		}
// if the current interval
// lies in the last interval
		else{
			ans.back()[1] = max(ans.back()[1],arr[i][1]);
		}
	}
	return ans;
}
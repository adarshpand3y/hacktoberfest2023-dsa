//using DFS + kosarju's algorithm - striver
#include<bits/stdc++.h>
void dfs(int node,vector<int>&vis,vector<int>adj[],stack<int>&st){
	vis[node] =1;
	for(auto it:adj[node]){
		if(!vis(it)){
			dfs(it,vis,adj,st);
		}
	}
	st.push(node);
}
void dfs3(int node,vector<int>&vis,vector<int>adjT[]){
	vis[node] =1;
	for(auto it:adjT[node]){
		if(!vis[it]){
			dfs3(it,vis,adjT);
		}
	}
}
//Function to find number of strongly connected components in the graph
int kosarju(int V,vector<int>adj[]){
	vector<int>vis(V,0);
	stack<int>st;
	for(int i=0;i<V;i++){
		if(!vis[i]){
			dfs(i,vis,adj,st);
		}
	}
	vector<int>adjT[];
	for(int i=0;i<V;i++){
		vis[i] =0;
		for(auto it:adj[i]){
			adjT[it].push_back(i);
		}
	}
	int SCC =0;
	while(!st.empty()){
		int node = st.top();
		st.pop();
		if(!vis[node]){
			SCC++;
			dfs3(node,vis,adjT);
		}	
	}
	return SCC;
}
//Another sol(Tarjans<--Kosarju's Extension)- codestudio
void dfs(int node,vector<int>&vis,vector<int>adj[],stack<int>&st){
	vis[node] =1;
	for(auto it:adj[node]){
		if(!vis[it])
		dfs(it,vis,adj,st);
	}
	st.push(node);
}

void dfsT(int node,vector<int>&vis,vector<int>adjT[],vector<int>&SCC){
	vis[node] =1;
	SCC.push_back(node);
	for(auto it:adjT[]){
		if(!vis[it])
		dfsT(it,adj,vis,SCC);
	}
}
vector<vector<int>>stronglyConnectedComponents(int n,vector<vector<int>>&edges){
	vector<int>adj[n];
	vector<int>adjT[n];
	for(auto it:edges){
		adj[it[0]].push_back(it[1]);
		adjT[it[1]].push_back(it[0]);
	}
	vector<int>vis(n,0);
	stack<int>st;
	for(int i=0;i<n;i++){
		if(!vis[i]){
			dfs(i,adj,vis,st);
		}
	}
	for(int i=0;i<n;i++)
	vis[i] =0;
	vector<vector<int>>SCC;
	while(!st.empty()){
		int node = st.top();
		st.pop();
		vector<int>temp;
		if(!vis[node]){
			dfsT(node,vis,adjT,temp)
		}
		SCC.push_back(temp);
	}
	return SCC;
}
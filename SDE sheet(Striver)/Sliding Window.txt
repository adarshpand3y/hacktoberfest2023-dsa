//brute approach
#include<bits/stdc++.h>
using namespace std;
vector<int>maxSlidingWindow(vector<int>&arr,int n,int k){
	int max;
	vector<int>ans(n-k+1);
	
	for(int i=0;i<=n-k;i++){
		max = arr[i];
	
	for(int j=1;j<k;j++){
		if(arr[i+j]>max){
			max = arr[i+j];
		}
	}
	ans[i] = max;
	}
	return ans;
}
//using dequeue
vector<int>maxSlidingWindow(vector<int>arr,int n,int k){
	int j=0;
	vector<int>ans(n-k+1);
	deque<int>deq;
	
	for(int i=0;i<k;i++){
		while(!deq.empty() && arr[i]>=arr[deq.back()]){
			deq.pop_back();
		}
		deq.push_back(i);
	}
	
	for(int i=k;i<n;i++){
		ans[j++] = arr[deq.front()]; 
		
	while(!deq.empty()) && deq.front()<=i-k){
		deq.pop_front();
	}
	
	while(!deq.empty() && arr[i]>=arr[deq.back()]){
		deq.pop_back();
		}
	deq.push_back();
	}
	ans[j++] = arr[deq.front()];
	return ans;
}
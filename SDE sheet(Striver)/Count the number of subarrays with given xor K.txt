//brute approach 
#include<bits/stdc++.h>
using namespace std;
int subarrayWithXorK(vector<int>&arr,int k){
	int n = arr.size();
	int cnt=0;
	
	for(int i=0;i<n;i++){
		for(int j=i;j<n;j++){
			int xorr =0;
			for(int p =i;p<=j;p++){
				xorr =xorr^arr[p];
			}
			if(xorr==k)
			cnt++;
		}
	}
	return cnt;
}
//better approach
int subarrayWithXorK(vector<int>&arr,int k){
	int n = arr.size();
	int cnt =0;
	
	for(int i=0;i<n;i++){
		int xorr =0;
		for(int j=i;j<n;j++){
			xorr = xorr^arr[j];
			
			if(xorr==k)
			cnt++;
		}
	}
	return cnt;
}
//Optimal solution - hashing
int subarrayWithXorK(vector<int>arr,int k){
	int n = arr.size();
	int xr =0;
	map<int,int>mp;
	mp[xr]++;
	int cnt =0;
	
	for(int i=0;i<n;i++){
		xr = xr^arr[i];
		int x = xr^k;
		cnt+=mp[x];
		mp[xr]++;
	}
	return cnt;
}
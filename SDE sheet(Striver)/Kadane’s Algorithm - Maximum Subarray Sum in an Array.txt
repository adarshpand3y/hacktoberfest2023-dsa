//brute apprach
int maxSubarraySum(int arr[],int n){
	int maxi = INT_MIN;
	for(int i=0;i<n;i++){
		for(int j=i;j<n;j++){
			int sum =0;
			
		for(int k=i;k<=j;k++){
			sum +=arr[k];
		}
		maxi = max(maxi,sum);
		}
	}
	return maxi;
}
//better appraoch
int maxSubarraySum(int arr[],int n){
	int maxi = INT_MIN;
	for(int i=0;i<n;i++){
		int sum =0;
		for(int j=i;j<n;j++){
			sum +=arr[j];
			maxi = max(maxi,sum);
		}
	}
	return maxi;
}
//Optimal solution
long long maxSubarraySum(int arr[],int n){
	long long maxi = LONG_MIN;
	long long sum =0;
	
	for(int i=0;i<n;i++){
		sum +=arr[i];
		if(sum>maxi){
			maxi = sum;
		}
		
		if(sum<0){
			sum =0;
		}
	}
	return maxi;
}
//follow-up solution
long long maxSubarraySum(int arr[],int n){
	long long maxi = LONG_MIN;
	long long sum =0;
	
	int start =0;
	int ansStart =-1,ansEnd =-1;
	for(int i=0;i<n;i++){
		if(sum==0)
			start =i;
		sum +=arr[i];
		
		if(sum>maxi){
			maxi = sum;
			ansStart = start;
			ansEnd =i;
		}
		if(sum<0){
			sum =0;
		}
	}
	return maxi;
}
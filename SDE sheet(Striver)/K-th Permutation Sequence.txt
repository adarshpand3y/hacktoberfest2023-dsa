//brute approach
#include<bits/stdc++.h>
void permutate(string s,string ans,vector<string>&res){
	if(s.size()==0){
		res.push_back(ans);
		return;
	}
	
	for(int i=0;i<s.size();i++){
		ans +=s[i];
		
		permutate(s.substr(0,i)+s.substr(i+1),ans,res);
		ans.pop_back();
	}
}
string kthPermutation(int n,int k){
	vector<string>res;
	string s = "";
	for(int i=1;i<=n;i++){
		s +=to_string(i);
	}
	permutate(s,"",res);
	return res[k-1];
}
//Optimised approach
string kthPermutation(int n,int k){
	int j=1,fact =1;
	string s;
	
	for(int i=1;i<=n;i++){
		fact*=i;
		
		 //Build string of sequence 1234...n.
		s+=to_string(i);
	}
	k--;
	
	for(int i=0;i<n;i++){
		fact/=n-i;
		
		//Calculate index of char to put at index i on 's'
		j= i+k/fact;
		char c = s[j];
		
		//Remove c by shifting to cover up (adjust the right part).
		while(j>i){
			s[j]  = s[j-1];
			j--;
		}
		
		k%=fact;
		s[i] = c;
	}
	return s;
}
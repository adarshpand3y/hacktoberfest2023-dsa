//recursive
#include<bits/stdc++.h>
using namespace std;
int help(vector<int>&arr,int n,int k){
	if(n<=0){
		// If k = 0, we reached target sum
		if(k==0){
			return 1;
		}
		else{
			return 0;
		}
	}
	
	 // arr[n-1] not taken in considertion. 
	int x = help(arr,n-1,k);
	int y=0;
	if(k-arr[n-1]>=0){
		// arr[n-1] taken in considertion. 
		y = help(arr,n-1,k-arr[n-1]);
	}
	
	return x||y;
}

bool subsetSumToK(int n,int k,vector<int>&arr){
	int ans = help(arr,n,k);
	if(ans==1){
		return true;
	}
	else{
		return false;
	}
}
//memoization
int help(vector<int>&arr,int n,int k,vector<vector<int>>&memo){
	if(n<=0){
		// If k = 0, we reached target sum
		if(k==0){
			return 1;
		}
		else{
			return 0;
		}
	}
	
	if(memo[n][k]!=-1)
	return memo[n][k];
	 // arr[n-1] not taken in considertion. 
	int x = help(arr,n-1,k,memo);
	int y=0;
	if(k-arr[n-1]>=0){
		// arr[n-1] taken in considertion. 
		y = help(arr,n-1,k-arr[n-1],memo);
	}
	memo[n][k] = x||y;
	return memo[n][k];
}

bool subsetSumToK(int n,int k,vector<int>&arr){
	vector<vector<int>>memo(n+1,vector<int>(k+1,-1));
	int ans = help(arr,n,k,memo);
	if(ans==1){
		return true;
	}
	else{
		return false;
	}
}
//DP
bool subsetSumToK(int n,int k,vector<int>&arr){
	vector<vector<bool>>dp(n+1,vector<bool>(k+1));
	
	for(int i=0;i<=n;i++){
		dp[i][0] = true;
	}
	
	for(int i=1;i<=k;i++){
		dp[0][i] = false;
	}
	
	//fiiling dp array
	for(int i=1;i<=n;i++){
		for(int j=1;j<=k;j++){
			dp[i][j] = dp[i-1][j];
			if(arr[i-1]<=j){
				dp[i][j] = dp[i][j]||dp[i-1][j-arr[i-1]];
			}
		}
	}
	return dp[n][k];
}